"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("./index");
describe('default provider', function test() {
    var _this = this;
    var address = '0xB98bD7C7f656290071E52D1aA617D9cB4467Fd6D';
    var privateKey = 'de926db3012af759b4f24b5a51ef6afa397f04670f634aa4f48d4480417007f3';
    beforeEach(function () {
        _this.provider = new index_1.MockProvider({
            address: address,
            privateKey: privateKey,
            networkVersion: 31, debug: false
        });
    });
    it('returns a provider object', function () {
        expect(_this.provider).toBeDefined();
    });
    describe('type of provider', function () {
        it('is metamask', function () {
            expect(_this.provider.isMetaMask).toBeTruthy();
        });
        it('can set that is not metamask', function () {
            _this.provider.isMetaMask = false;
            expect(_this.provider.isMetaMask).toBeFalsy();
        });
        it('can set that is another provider', function () {
            _this.provider.isLedger = true;
            expect(_this.provider.isLedger).toBeTruthy();
        });
    });
    describe('overwrites', function () {
        it('can overwrite request to make it fail', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.provider.request = function () { return Promise.reject(new Error('Fail')); };
                        return [4 /*yield*/, expect(this.provider.request({ method: 'any' })).rejects.toThrow()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('eth_accounts & eth_requestAccounts', function () {
        it('is correctly set', function () {
            expect(_this.provider.selectedAddress).toBe(address);
        });
        it('is correct with request', function () { return __awaiter(_this, void 0, void 0, function () {
            var response, response2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.provider.request({ method: 'eth_accounts', params: [] })];
                    case 1:
                        response = _a.sent();
                        expect(response).toEqual([address]);
                        return [4 /*yield*/, this.provider.request({ method: 'eth_requestAccounts', params: [] })];
                    case 2:
                        response2 = _a.sent();
                        expect(response2).toEqual([address]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('is correct with sendAsync', function () {
            _this.provider.sendAsync({ method: 'eth_accounts' }, function (_err, success) { return expect(success).toEqual({ result: [address] }); });
        });
    });
    describe('eth_chainId & net_version', function () {
        it('is correctly set', function () {
            expect(_this.provider.networkVersion).toBe(31);
            expect(parseInt(_this.provider.chainId)).toBe(31);
        });
        it('is correct with response', function () { return __awaiter(_this, void 0, void 0, function () {
            var response, response2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.provider.request({ method: 'net_version', params: [] })];
                    case 1:
                        response = _a.sent();
                        expect(response).toEqual(31);
                        return [4 /*yield*/, this.provider.request({ method: 'eth_chainId', params: [] })];
                    case 2:
                        response2 = _a.sent();
                        expect(response2).toEqual('0x1f');
                        return [2 /*return*/];
                }
            });
        }); });
        it('is correct with sendAsync', function () {
            _this.provider.sendAsync({ method: 'net_version' }, function (_err, success) { return expect(success).toEqual({ result: 31 }); });
        });
    });
    describe('personal_sign', function () {
        it('returns the correct signature for the message', function () { return __awaiter(_this, void 0, void 0, function () {
            var signed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.provider.request({ method: 'personal_sign', params: ['hello world!'] })];
                    case 1:
                        signed = _a.sent();
                        expect(signed).toEqual('0xbb14d14dba17f231efd1680c3e150a175ba894183ef6019f4a3100fe0d17938246fcc5656a8fa76ed11c00ffd6944ed08bca23880e39a1a384d3a33e04aaf38e1c');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('eth_decrypt', function () {
        it('decrypts content', function () { return __awaiter(_this, void 0, void 0, function () {
            var encrypted, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encrypted = '0x7b2276657273696f6e223a227832353531392d7873616c736132302d706f6c7931333035222c226e6f6e6365223a224467743246724554314f4d786f6a786c41533069374a6c4f76546f777a6b6a6a222c22657068656d5075626c69634b6579223a227a48762f3853664544384267326b557576797770543274323378774d4659583738716a7869444a387147303d222c2263697068657274657874223a224c6e35644d566c6c4b53726b4c5a345862424b56342b536d53727557227d';
                        return [4 /*yield*/, this.provider.request({ method: 'eth_decrypt', params: [encrypted, address] })];
                    case 1:
                        result = _a.sent();
                        expect(result).toEqual('hello');
                        return [2 /*return*/];
                }
            });
        }); });
        it('decrypts content 2', function () { return __awaiter(_this, void 0, void 0, function () {
            var encrypted, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encrypted = '0x7b2276657273696f6e223a227832353531392d7873616c736132302d706f6c7931333035222c226e6f6e6365223a224a5647674e476b3149677957577253546b4448784145347a4e7341313967612f222c22657068656d5075626c69634b6579223a22567973642b7445517a6e6f557459614e485554696a4c614d6f386a767332656f4e43636675556a512f41633d222c2263697068657274657874223a227166306e6450374c5569416276704e4f5945764b3331783953445971227d';
                        return [4 /*yield*/, this.provider.request({ method: 'eth_decrypt', params: [encrypted, address] })];
                    case 1:
                        result = _a.sent();
                        expect(result).toEqual('tacos');
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
describe('provider with confirm enable', function test() {
    var _this = this;
    var address = '0xB98bD7C7f656290071E52D1aA617D9cB4467Fd6D';
    var privateKey = 'de926db3012af759b4f24b5a51ef6afa397f04670f634aa4f48d4480417007f3';
    beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            this.provider = new index_1.MockProvider({
                address: address,
                privateKey: privateKey,
                networkVersion: 31, debug: false, manualConfirmEnable: true
            });
            return [2 /*return*/];
        });
    }); });
    it('should not allow to use acceptEnable without pending request', function () {
        expect(function () { return _this.provider.answerEnable(true); }).toThrow();
        expect(function () { return _this.provider.answerEnable(false); }).toThrow();
    });
    it('resolves with acceptance', function () { return __awaiter(_this, void 0, void 0, function () {
        var responsePromise;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(1);
                    responsePromise = this.provider.request({ method: 'eth_requestAccounts', params: [] })
                        .then(function (accounts) { return expect(accounts[0]).toEqual(address); });
                    this.provider.answerEnable(true);
                    return [4 /*yield*/, responsePromise];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('rejects with denial', function () { return __awaiter(_this, void 0, void 0, function () {
        var responsePromise;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(1);
                    responsePromise = this.provider.request({ method: 'eth_requestAccounts', params: [] })
                        .catch(function (e) { return expect(e).toBeDefined(); });
                    this.provider.answerEnable(false);
                    return [4 /*yield*/, responsePromise];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    /*
    it('does not resolver request accounts if no answer', async () => {
      // see that this timeouts
      await provider.request({ method: 'eth_requestAccounts', params: [] })
    })
    */
});
//# sourceMappingURL=index.test.js.map